---
import { AstroComponentFactory } from "astro/dist/runtime/server";
import BlogPost from "../../layouts/BlogPost.astro";
import SiteLayout from "../../layouts/SiteLayout.astro";

import { getEntryBySlug, getCollection, CollectionEntry } from "astro:content";
import TilComponent from "../../components/TilComponent.astro";
let showTaggedTils = false;
let entry: CollectionEntry<"til"> | undefined;
let RenderContent: AstroComponentFactory | astroHTML.JSX.IntrinsicAttributes;

// 1. Get the slug from the incoming server request
const { slug } = Astro.params;

if (slug === undefined) {
  throw new Error("Slug is required");
}

let tils = (await getCollection("til"))
  .sort(
    (a, b) =>
      new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
  )
  .filter((til) => {
    return Object.keys(til.data).length > 0 && !til.data.draft;
  });

const uniqueTags = [...new Set(tils.map((til) => til.data.tags).flat())];
if (uniqueTags.includes(slug)) {
  showTaggedTils = true;
  tils = tils.filter((til) => {
    return Object.keys(til.data).length > 0 && til.data.tags?.includes(slug);
  });
} else {
  // 2. Query for the entry directly using the request slug
  entry = await getEntryBySlug("til", slug);
  // 3. Redirect if the entry does not exist
  if (entry === undefined) {
    return Astro.redirect("/404");
  }
  const { Content } = await entry.render();
  RenderContent = Content;
}
---

<>
  {
    showTaggedTils && (
      <SiteLayout>
        <h4 class="heading">
          TILs tagged under
          <span class="slug">#{slug}</span>
        </h4>
        <section>
          <ul>
            <TilComponent tils={tils} showTags={false} />
          </ul>
        </section>
      </SiteLayout>
    )
  }
  {
    !showTaggedTils && (
      <BlogPost content={entry.data}>
        <RenderContent />
      </BlogPost>
    )
  }
</>
<style>
  .heading {
    margin-bottom: 15px;
  }
  .slug {
    color: var(--brand);
  }
</style>
